name: CI/CD Pipeline

# Cost optimization features:
# - Concurrency control to cancel duplicate runs
# - Reduced artifact retention (7-14 days vs 30-90 days)
# - Conditional jobs: E2E tests only on main branch or with 'run-e2e' label
# - Security scans only on main branch
# - Codecov uploads only on main branch pushes
# - Optimized job dependencies

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress workflows for the same PR/branch to save costs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint
      
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: npm run test:coverage -- --runInBand --detectOpenHandles
      
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      continue-on-error: true
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage
        
    - name: Upload backend coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/
        retention-days: 7

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage -- --run
      
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage
        
    - name: Upload frontend coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 7

  # E2E Tests (only on main branch to save costs)
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-e2e')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build backend
      working-directory: ./backend
      run: npm run build
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Create test fixtures
      run: |
        mkdir -p tests/fixtures
        echo "Test document content" > tests/fixtures/test-document.txt
        # Create a simple test image using base64
        echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==' | base64 -d > tests/fixtures/test-image.jpg
        
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        
    - name: Upload E2E test videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-videos
        path: test-results/
        retention-days: 7

  # Combined Coverage Report
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: coverage/backend/
        
    - name: Download frontend coverage
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: coverage/frontend/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install coverage tools
      run: npm install -g nyc lcov-result-merger
      
    - name: Merge coverage reports
      run: |
        mkdir -p coverage/merged
        # Copy lcov files if they exist
        if [ -f coverage/backend/lcov.info ]; then
          cp coverage/backend/lcov.info coverage/merged/backend-lcov.info
        fi
        if [ -f coverage/frontend/lcov.info ]; then
          cp coverage/frontend/lcov.info coverage/merged/frontend-lcov.info
        fi
        
        # Merge lcov files
        if ls coverage/merged/*.info 1> /dev/null 2>&1; then
          lcov-result-merger 'coverage/merged/*.info' coverage/merged/merged-lcov.info
        fi
        
    - name: Generate HTML coverage report
      run: |
        if [ -f coverage/merged/merged-lcov.info ]; then
          npx genhtml coverage/merged/merged-lcov.info -o coverage/html-report
        else
          echo "No lcov files found to generate HTML report"
          mkdir -p coverage/html-report
          echo "<html><body><h1>Coverage Report</h1><p>No coverage data available</p></body></html>" > coverage/html-report/index.html
        fi
        
    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let coverageComment = '## ðŸ“Š Coverage Report\n\n';
          
          // Try to read backend coverage summary
          try {
            const backendSummary = fs.readFileSync('coverage/backend/coverage-summary.json', 'utf8');
            const backendData = JSON.parse(backendSummary);
            const backendTotal = backendData.total;
            
            coverageComment += '### Backend Coverage\n';
            coverageComment += `- **Lines:** ${backendTotal.lines.pct}%\n`;
            coverageComment += `- **Functions:** ${backendTotal.functions.pct}%\n`;
            coverageComment += `- **Branches:** ${backendTotal.branches.pct}%\n`;
            coverageComment += `- **Statements:** ${backendTotal.statements.pct}%\n\n`;
          } catch (e) {
            coverageComment += '### Backend Coverage\nNo coverage data available\n\n';
          }
          
          // Try to read frontend coverage summary
          try {
            const frontendSummary = fs.readFileSync('coverage/frontend/coverage-summary.json', 'utf8');
            const frontendData = JSON.parse(frontendSummary);
            const frontendTotal = frontendData.total;
            
            coverageComment += '### Frontend Coverage\n';
            coverageComment += `- **Lines:** ${frontendTotal.lines.pct}%\n`;
            coverageComment += `- **Functions:** ${frontendTotal.functions.pct}%\n`;
            coverageComment += `- **Branches:** ${frontendTotal.branches.pct}%\n`;
            coverageComment += `- **Statements:** ${frontendTotal.statements.pct}%\n\n`;
          } catch (e) {
            coverageComment += '### Frontend Coverage\nNo coverage data available\n\n';
          }
          
          coverageComment += 'ðŸ“‹ Full coverage report available in workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageComment
          });

  # Build and Deploy (on main branch)
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend && npm ci && cd ..
        cd frontend && npm ci && cd ..
        
    - name: Build applications
      run: |
        cd backend && npm run build && cd ..
        cd frontend && npm run build && cd ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/dist/
        retention-days: 7

# Security scanning (only on main branch to save costs)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
